#!/bin/bash
# Script de test pour valider le systÃ¨me de reranking

set -e

echo "ðŸ§ª Test du SystÃ¨me de Reranking RAGFab"
echo "======================================"
echo ""

# Couleurs pour l'output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
RERANKER_URL="http://localhost:8002"
API_URL="http://localhost:8000"

echo "ðŸ“‹ Ã‰tape 1: VÃ©rification des services"
echo "--------------------------------------"

# Test healthcheck reranker
echo -n "Reranker service... "
if curl -s -f "${RERANKER_URL}/health" > /dev/null 2>&1; then
    echo -e "${GREEN}âœ“ UP${NC}"
else
    echo -e "${RED}âœ— DOWN${NC}"
    echo "DÃ©marrer avec: docker-compose up -d reranker"
    exit 1
fi

# Test healthcheck API
echo -n "API service... "
if curl -s -f "${API_URL}/api/docs" > /dev/null 2>&1; then
    echo -e "${GREEN}âœ“ UP${NC}"
else
    echo -e "${RED}âœ— DOWN${NC}"
    echo "DÃ©marrer avec: docker-compose up -d ragfab-api"
    exit 1
fi

echo ""
echo "ðŸ“Š Ã‰tape 2: Test du service reranker isolÃ©"
echo "-------------------------------------------"

# Test simple de reranking
RERANK_PAYLOAD='{
  "query": "traitement de l'\''hypertension artÃ©rielle",
  "documents": [
    {
      "chunk_id": "1",
      "document_id": "doc1",
      "document_title": "Guide_Cardiologie.pdf",
      "document_source": "/docs/cardio.pdf",
      "chunk_index": 1,
      "content": "Le traitement de l'\''hypertension artÃ©rielle nÃ©cessite une approche progressive. Les mÃ©dicaments de premiÃ¨re ligne incluent les IEC, les ARA2, les diurÃ©tiques thiazidiques et les inhibiteurs calciques.",
      "similarity": 0.92
    },
    {
      "chunk_id": "2",
      "document_id": "doc1",
      "document_title": "Guide_Cardiologie.pdf",
      "document_source": "/docs/cardio.pdf",
      "chunk_index": 5,
      "content": "L'\''hypertension artÃ©rielle est dÃ©finie par une pression systolique supÃ©rieure Ã  140 mmHg ou une pression diastolique supÃ©rieure Ã  90 mmHg. Elle constitue un facteur de risque majeur.",
      "similarity": 0.88
    },
    {
      "chunk_id": "3",
      "document_id": "doc2",
      "document_title": "Guide_Neurologie.pdf",
      "document_source": "/docs/neuro.pdf",
      "chunk_index": 12,
      "content": "Les accidents vasculaires cÃ©rÃ©braux peuvent Ãªtre prÃ©venus par un bon contrÃ´le de la pression artÃ©rielle. La prÃ©vention primaire est essentielle.",
      "similarity": 0.85
    }
  ],
  "top_k": 3
}'

echo -n "Test de reranking... "
RERANK_RESPONSE=$(curl -s -X POST "${RERANKER_URL}/rerank" \
  -H "Content-Type: application/json" \
  -d "$RERANK_PAYLOAD")

if echo "$RERANK_RESPONSE" | grep -q '"count": 3'; then
    echo -e "${GREEN}âœ“ OK${NC}"

    # Afficher les dÃ©tails
    PROCESSING_TIME=$(echo "$RERANK_RESPONSE" | grep -o '"processing_time": [0-9.]*' | cut -d' ' -f2)
    echo "  â””â”€ Temps de traitement: ${PROCESSING_TIME}s"

    # VÃ©rifier que l'ordre est bon (chunk 1 devrait Ãªtre premier car plus pertinent pour le traitement)
    FIRST_CHUNK=$(echo "$RERANK_RESPONSE" | grep -o '"chunk_id": "[^"]*"' | head -1 | cut -d'"' -f4)
    if [ "$FIRST_CHUNK" = "1" ]; then
        echo -e "  â””â”€ Ordre de pertinence: ${GREEN}âœ“ Correct${NC}"
    else
        echo -e "  â””â”€ Ordre de pertinence: ${YELLOW}âš  Inattendu (chunk $FIRST_CHUNK en premier)${NC}"
    fi
else
    echo -e "${RED}âœ— Ã‰CHEC${NC}"
    echo "RÃ©ponse: $RERANK_RESPONSE"
    exit 1
fi

echo ""
echo "ðŸ”§ Ã‰tape 3: VÃ©rification de la configuration"
echo "---------------------------------------------"

# VÃ©rifier les variables d'environnement
echo "Variables d'environnement dans ragfab-api:"
docker-compose exec -T ragfab-api env | grep RERANKER || echo -e "${YELLOW}âš  Variables RERANKER non dÃ©finies${NC}"

echo ""
echo "ðŸ“ˆ Ã‰tape 4: Test d'intÃ©gration (optionnel)"
echo "-------------------------------------------"

if [ -f ".env" ] && grep -q "RERANKER_ENABLED=true" .env; then
    echo -e "RERANKER_ENABLED=true dÃ©tectÃ© dans .env: ${GREEN}âœ“${NC}"
    echo ""
    echo "Pour tester l'intÃ©gration complÃ¨te:"
    echo "1. Ouvrir le frontend: http://localhost:3000"
    echo "2. Poser une question technique"
    echo "3. Observer les logs:"
    echo "   docker-compose logs -f ragfab-api | grep -E '(Reranking|rerank)'"
    echo ""
    echo "Logs attendus:"
    echo "  - ðŸ”„ Reranking activÃ©: recherche de XX candidats"
    echo "  - ðŸŽ¯ Application du reranking sur XX candidats"
    echo "  - âœ… Reranking effectuÃ© en X.XXXs, X documents retournÃ©s"
else
    echo -e "RERANKER_ENABLED=false ou non dÃ©fini: ${YELLOW}âš ${NC}"
    echo ""
    echo "Pour activer le reranking:"
    echo "1. Dans .env, dÃ©finir: RERANKER_ENABLED=true"
    echo "2. RedÃ©marrer: docker-compose restart ragfab-api"
    echo "3. Relancer ce script pour vÃ©rifier"
fi

echo ""
echo "âœ… Tests terminÃ©s avec succÃ¨s!"
echo ""
echo "ðŸ“š Ressources:"
echo "  - Guide complet: RERANKING_GUIDE.md"
echo "  - Documentation technique: reranker-server/README.md"
echo "  - Configuration: CLAUDE.md (section Reranking)"
