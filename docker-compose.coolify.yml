version: '3.8'

# Configuration optimisée pour déploiement Coolify avec Traefik
# Les variables d'environnement seront configurées via l'interface Coolify

services:
  # Service PostgreSQL avec PGVector
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ragdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ragfab-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"

  # Service d'embeddings (HTTP API)
  embeddings:
    build:
      context: ./embeddings-server
      dockerfile: Dockerfile
    environment:
      MODEL_NAME: intfloat/multilingual-e5-large
    expose:
      - "8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - ragfab-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    labels:
      - "coolify.managed=true"
      # Labels Traefik pour exposer le service (optionnel)
      - "traefik.enable=true"
      - "traefik.http.routers.embeddings.rule=Host(`${EMBEDDINGS_DOMAIN:-embeddings.localhost}`)"
      - "traefik.http.routers.embeddings.entrypoints=websecure"
      - "traefik.http.routers.embeddings.tls=true"
      - "traefik.http.routers.embeddings.tls.certresolver=letsencrypt"
      - "traefik.http.services.embeddings.loadbalancer.server.port=8001"

  # Service API Backend (FastAPI)
  ragfab-api:
    build:
      context: ./web-api
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      # PostgreSQL connection (utiliser variables individuelles pour asyncpg)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ragdb}
      # Garder DATABASE_URL pour compatibilité
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ragdb}
      # Auth
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      EMBEDDINGS_API_URL: http://embeddings:8001
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      MISTRAL_MODEL_NAME: ${MISTRAL_MODEL_NAME:-mistral-small-latest}
      CHOCOLATINE_API_URL: ${CHOCOLATINE_API_URL:-https://apigpt.mynumih.fr}
      CHOCOLATINE_MODEL_NAME: ${CHOCOLATINE_MODEL_NAME:-jpacifico/Chocolatine-2-14B-Instruct-v2.0.3}
      CORS_ORIGINS: ${CORS_ORIGINS:-}
    volumes:
      - ./rag-app:/rag-app:ro
      - api_uploads:/app/uploads
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - ragfab-network
      - coolify
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      # Labels Traefik pour l'API
      - "traefik.enable=true"
      - "traefik.http.routers.ragfab-api.rule=Host(`${API_DOMAIN:-api.localhost}`)"
      - "traefik.http.routers.ragfab-api.entrypoints=websecure"
      - "traefik.http.routers.ragfab-api.tls=true"
      - "traefik.http.routers.ragfab-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.ragfab-api.loadbalancer.server.port=8000"
      # CORS headers pour permettre les requêtes cross-origin
      - "traefik.http.middlewares.ragfab-api-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.ragfab-api-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.ragfab-api-cors.headers.accesscontrolalloworiginlist=https://${FRONTEND_DOMAIN:-ragfab.localhost}"
      - "traefik.http.middlewares.ragfab-api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.ragfab-api-cors.headers.addvaryheader=true"
      - "traefik.http.routers.ragfab-api.middlewares=ragfab-api-cors"

  # Service Frontend (React/Vite - version buildée)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    depends_on:
      ragfab-api:
        condition: service_started
    expose:
      - "80"
    networks:
      - ragfab-network
      - coolify
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - "traefik.http.routers.frontend.rule=Host(`rag.lab-numihfrance.fr`)"
      - traefik.http.routers.frontend.entryPoints=https
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=80
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://0.0.0.0:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ragfab-network:
    driver: bridge
  coolify:
    external: true

volumes:
  postgres_data:
    driver: local
  api_uploads:
    driver: local

# Notes pour Coolify:
# 1. Configurer les variables d'environnement dans Coolify:
#    - POSTGRES_PASSWORD (obligatoire)
#    - JWT_SECRET (obligatoire)
#    - ADMIN_PASSWORD (obligatoire)
#    - MISTRAL_API_KEY (obligatoire pour Mistral)
#    - API_DOMAIN (ex: api-ragfab.votredomaine.com)
#    - FRONTEND_DOMAIN (ex: ragfab.votredomaine.com)
#    - EMBEDDINGS_DOMAIN (optionnel, si vous voulez exposer le service d'embeddings)
#
# 2. Assurez-vous que Coolify a configuré Traefik avec Let's Encrypt
#
# 3. Le service rag-app n'est pas inclus car il s'exécute uniquement en CLI
#    pour l'ingestion (géré par ragfab-api)
