"""
Routes de gestion des utilisateurs (r√©serv√©es aux admins)
"""
from fastapi import APIRouter, HTTPException, Depends, status
from typing import List, Optional
from uuid import UUID
import logging

from ..auth import get_current_admin_user, get_password_hash
from .. import database
from ..models import UserCreate, UserUpdate, UserResponse, UserListResponse, PasswordReset

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/admin/users", tags=["User Management"])


@router.get("", response_model=List[UserListResponse])
async def list_users(
    limit: int = 100,
    offset: int = 0,
    is_active: Optional[bool] = None,
    is_admin: Optional[bool] = None,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Liste tous les utilisateurs avec filtrage optionnel

    Args:
        limit: Nombre maximum de r√©sultats
        offset: Offset pour la pagination
        is_active: Filtrer par statut actif
        is_admin: Filtrer par r√¥le admin
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        Liste des utilisateurs
    """
    # Construction de la requ√™te avec filtres optionnels
    conditions = []
    params = []
    param_count = 1

    if is_active is not None:
        conditions.append(f"is_active = ${param_count}")
        params.append(is_active)
        param_count += 1

    if is_admin is not None:
        conditions.append(f"is_admin = ${param_count}")
        params.append(is_admin)
        param_count += 1

    where_clause = f"WHERE {' AND '.join(conditions)}" if conditions else ""

    query = f"""
        SELECT id, username, email, first_name, last_name, is_active, is_admin, created_at, last_login
        FROM users
        {where_clause}
        ORDER BY created_at DESC
        LIMIT ${param_count} OFFSET ${param_count + 1}
    """
    params.extend([limit, offset])

    async with database.db_pool.acquire() as conn:
        rows = await conn.fetch(query, *params)
        users = [UserListResponse(**dict(row)) for row in rows]

    logger.info(f"üìã Liste utilisateurs r√©cup√©r√©e ({len(users)} r√©sultats) par {current_user.get('username')}")
    return users


@router.post("", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
async def create_user(
    user_data: UserCreate,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Cr√©e un nouvel utilisateur

    Args:
        user_data: Donn√©es du nouvel utilisateur
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        Utilisateur cr√©√©

    Raises:
        HTTPException: Si le username existe d√©j√†
    """
    # V√©rifier si le username existe d√©j√†
    async with database.db_pool.acquire() as conn:
        existing = await conn.fetchrow(
            "SELECT id FROM users WHERE username = $1",
            user_data.username
        )

        if existing:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail=f"Le nom d'utilisateur '{user_data.username}' existe d√©j√†"
            )

        # Hacher le mot de passe
        hashed_password = get_password_hash(user_data.password)

        # Cr√©er l'utilisateur avec must_change_password=True par d√©faut
        user = await conn.fetchrow(
            """
            INSERT INTO users (username, email, first_name, last_name, hashed_password, is_active, is_admin, must_change_password)
            VALUES ($1, $2, $3, $4, $5, $6, $7, true)
            RETURNING id, username, email, first_name, last_name, is_active, is_admin, created_at, last_login
            """,
            user_data.username,
            user_data.email,
            user_data.first_name,
            user_data.last_name,
            hashed_password,
            user_data.is_active,
            user_data.is_admin
        )

    logger.info(f"‚úÖ Utilisateur cr√©√©: {user['username']} (admin: {user['is_admin']}) par {current_user.get('username')}")
    return UserResponse(**dict(user))


@router.get("/{user_id}", response_model=UserResponse)
async def get_user(
    user_id: UUID,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    R√©cup√®re les d√©tails d'un utilisateur

    Args:
        user_id: ID de l'utilisateur
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        D√©tails de l'utilisateur

    Raises:
        HTTPException: Si l'utilisateur n'existe pas
    """
    async with database.db_pool.acquire() as conn:
        user = await conn.fetchrow(
            """
            SELECT id, username, email, first_name, last_name, is_active, is_admin, created_at, last_login
            FROM users
            WHERE id = $1
            """,
            user_id
        )

        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Utilisateur {user_id} non trouv√©"
            )

    return UserResponse(**dict(user))


@router.patch("/{user_id}", response_model=UserResponse)
async def update_user(
    user_id: UUID,
    user_data: UserUpdate,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Met √† jour un utilisateur

    Args:
        user_id: ID de l'utilisateur
        user_data: Donn√©es √† mettre √† jour
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        Utilisateur mis √† jour

    Raises:
        HTTPException: Si l'utilisateur n'existe pas
    """
    # Construction de la requ√™te de mise √† jour dynamique
    updates = []
    values = []
    param_count = 1

    if user_data.email is not None:
        updates.append(f"email = ${param_count}")
        values.append(user_data.email)
        param_count += 1

    if user_data.first_name is not None:
        updates.append(f"first_name = ${param_count}")
        values.append(user_data.first_name)
        param_count += 1

    if user_data.last_name is not None:
        updates.append(f"last_name = ${param_count}")
        values.append(user_data.last_name)
        param_count += 1

    if user_data.is_active is not None:
        updates.append(f"is_active = ${param_count}")
        values.append(user_data.is_active)
        param_count += 1

    if user_data.is_admin is not None:
        updates.append(f"is_admin = ${param_count}")
        values.append(user_data.is_admin)
        param_count += 1

    if not updates:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Aucune donn√©e √† mettre √† jour"
        )

    values.append(user_id)
    query = f"""
        UPDATE users
        SET {', '.join(updates)}
        WHERE id = ${param_count}
        RETURNING id, username, email, first_name, last_name, is_active, is_admin, created_at, last_login
    """

    async with database.db_pool.acquire() as conn:
        user = await conn.fetchrow(query, *values)

        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Utilisateur {user_id} non trouv√©"
            )

    logger.info(f"‚úèÔ∏è Utilisateur modifi√©: {user['username']} par {current_user.get('username')}")
    return UserResponse(**dict(user))


@router.delete("/{user_id}")
async def delete_user(
    user_id: UUID,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Supprime un utilisateur

    Args:
        user_id: ID de l'utilisateur
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        Message de confirmation

    Raises:
        HTTPException: Si tentative de suppression de soi-m√™me ou utilisateur non trouv√©
    """
    # Protection: ne pas se supprimer soi-m√™me
    if str(user_id) == str(current_user.get('id')):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Vous ne pouvez pas supprimer votre propre compte"
        )

    async with database.db_pool.acquire() as conn:
        # R√©cup√©rer le username avant suppression (pour les logs)
        user = await conn.fetchrow(
            "SELECT username FROM users WHERE id = $1",
            user_id
        )

        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Utilisateur {user_id} non trouv√©"
            )

        # Supprimer l'utilisateur
        await conn.execute("DELETE FROM users WHERE id = $1", user_id)

    logger.warning(f"üóëÔ∏è Utilisateur supprim√©: {user['username']} par {current_user.get('username')}")
    return {"message": f"Utilisateur {user['username']} supprim√© avec succ√®s"}


@router.post("/{user_id}/reset-password")
async def reset_user_password(
    user_id: UUID,
    password_data: PasswordReset,
    current_user: dict = Depends(get_current_admin_user)
):
    """
    R√©initialise le mot de passe d'un utilisateur

    Args:
        user_id: ID de l'utilisateur
        password_data: Nouveau mot de passe
        current_user: Utilisateur admin courant (d√©pendance)

    Returns:
        Message de confirmation

    Raises:
        HTTPException: Si l'utilisateur n'existe pas
    """
    # Hacher le nouveau mot de passe
    hashed_password = get_password_hash(password_data.new_password)

    async with database.db_pool.acquire() as conn:
        # Mettre √† jour le mot de passe
        result = await conn.fetchrow(
            """
            UPDATE users
            SET hashed_password = $1
            WHERE id = $2
            RETURNING username
            """,
            hashed_password,
            user_id
        )

        if not result:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Utilisateur {user_id} non trouv√©"
            )

    logger.info(f"üîë Mot de passe r√©initialis√© pour: {result['username']} par {current_user.get('username')}")
    return {"message": f"Mot de passe r√©initialis√© pour {result['username']}"}
