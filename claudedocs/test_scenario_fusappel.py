#!/usr/bin/env python3
"""
Script de test pour le sc√©nario conversationnel multi-tours "erreur fusappel".

Ce script valide que le syst√®me RAG optimis√© g√®re correctement les conversations
multi-tours avec contexte conversationnel et d√©tection de r√©f√©rences implicites.

Sc√©nario test√©:
1. "j'ai une erreur fusappel" ‚Üí Explication de l'erreur
2. "comment la resoudre ?" ‚Üí Solution pas √† pas
3. "comment j'active le bluetooth" ‚Üí Instructions Bluetooth
4. "Et si √ßa ne marche toujours pas ?" ‚Üí Troubleshooting avanc√©

Validation:
- Chaque question doit √™tre enrichie avec le contexte
- Les r√©ponses doivent √™tre coh√©rentes avec les √©changes pr√©c√©dents
- Le topic conversationnel doit rester "erreur fusappel"
- Les sources doivent √™tre pertinentes et contextuelles

Date: 2025-01-24
Author: RAGFab Optimization Team
"""

import asyncio
import httpx
import sys
from uuid import uuid4
from datetime import datetime


# Configuration
API_URL = "http://localhost:8000"  # Modifier selon environnement
USER_ID = str(uuid4())  # ID utilisateur test
CONVERSATION_ID = None  # Sera cr√©√© dynamiquement


# Sc√©nario de test
TEST_SCENARIO = [
    {
        "turn": 1,
        "message": "j'ai une erreur fusappel",
        "expected_topic": "erreur fusappel",
        "validation": [
            "Le contexte devrait expliquer ce qu'est une erreur fusappel",
            "La r√©ponse devrait provenir de la base de connaissances",
            "Des sources documentaires devraient √™tre cit√©es"
        ]
    },
    {
        "turn": 2,
        "message": "comment la resoudre ?",
        "expected_enrichment": "comment resoudre l'erreur fusappel",
        "validation": [
            "La query doit √™tre enrichie avec 'erreur fusappel'",
            "La r√©ponse doit proposer des √©tapes de r√©solution",
            "Le contexte du tour 1 doit √™tre utilis√©"
        ]
    },
    {
        "turn": 3,
        "message": "comment j'active le bluetooth",
        "expected_topic": "activation bluetooth (dans contexte fusappel)",
        "validation": [
            "La question peut √™tre autonome ou li√©e au contexte",
            "Instructions Bluetooth doivent √™tre claires",
            "Sources techniques doivent √™tre cit√©es"
        ]
    },
    {
        "turn": 4,
        "message": "Et si √ßa ne marche toujours pas ?",
        "expected_enrichment": "troubleshooting si activation bluetooth √©choue",
        "validation": [
            "La query doit r√©f√©rencer les tours pr√©c√©dents",
            "Troubleshooting avanc√© ou alternatives doivent √™tre propos√©s",
            "Le contexte complet doit √™tre maintenu"
        ]
    }
]


async def create_conversation():
    """Cr√©e une nouvelle conversation de test."""
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{API_URL}/api/conversations",
            headers={
                "Authorization": f"Bearer test_token",
                "Content-Type": "application/json"
            },
            json={
                "title": "Test: Sc√©nario erreur fusappel",
                "user_id": USER_ID
            }
        )
        response.raise_for_status()
        return response.json()["id"]


async def send_message(conversation_id: str, message: str):
    """Envoie un message et r√©cup√®re la r√©ponse."""
    async with httpx.AsyncClient(timeout=60.0) as client:
        response = await client.post(
            f"{API_URL}/api/conversations/{conversation_id}/messages",
            headers={
                "Authorization": f"Bearer test_token",
                "Content-Type": "application/json"
            },
            json={
                "content": message,
                "user_id": USER_ID
            }
        )
        response.raise_for_status()
        return response.json()


async def get_conversation_context(conversation_id: str):
    """R√©cup√®re le contexte conversationnel actuel."""
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{API_URL}/api/conversations/{conversation_id}",
            headers={"Authorization": f"Bearer test_token"}
        )
        response.raise_for_status()
        return response.json()


def print_separator(title: str = ""):
    """Affiche un s√©parateur visuel."""
    if title:
        print(f"\n{'=' * 80}")
        print(f"  {title}")
        print(f"{'=' * 80}\n")
    else:
        print(f"{'=' * 80}\n")


def validate_response(turn_data: dict, response: dict):
    """Valide une r√©ponse selon les crit√®res du sc√©nario."""
    print(f"‚úì Validation Tour {turn_data['turn']}:")

    # V√©rifier que la r√©ponse contient du contenu
    if response.get("assistant_message"):
        print("  ‚úì R√©ponse g√©n√©r√©e avec succ√®s")
    else:
        print("  ‚úó ERREUR: Pas de r√©ponse g√©n√©r√©e")
        return False

    # V√©rifier les sources
    sources = response.get("sources", [])
    if sources:
        print(f"  ‚úì Sources cit√©es: {len(sources)} documents")
        for i, source in enumerate(sources[:3], 1):
            print(f"    {i}. {source.get('document_title', 'Titre inconnu')}")
    else:
        print("  ‚ö† Aucune source cit√©e (peut √™tre intentionnel)")

    # V√©rifier le topic conversationnel
    context = response.get("conversation_context", {})
    if context:
        current_topic = context.get("current_topic", "N/A")
        print(f"  ‚úì Topic actuel: '{current_topic}'")

        if "expected_topic" in turn_data:
            expected = turn_data["expected_topic"].lower()
            if expected.split()[0] in current_topic.lower():
                print(f"  ‚úì Topic correspond aux attentes")
            else:
                print(f"  ‚ö† Topic inattendu (attendu: {expected})")

    print()
    return True


async def run_test_scenario():
    """Ex√©cute le sc√©nario de test complet."""
    print_separator("RAGFab - Test Sc√©nario Multi-Tours: Erreur Fusappel")

    print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê API URL: {API_URL}")
    print(f"üë§ User ID: {USER_ID}\n")

    try:
        # Cr√©er conversation
        print("üÜï Cr√©ation de la conversation de test...")
        conversation_id = await create_conversation()
        print(f"‚úì Conversation cr√©√©e: {conversation_id}\n")

        # Ex√©cuter chaque tour du sc√©nario
        for turn_data in TEST_SCENARIO:
            print_separator(f"TOUR {turn_data['turn']}")

            print(f"üí¨ Message utilisateur:")
            print(f"   \"{turn_data['message']}\"\n")

            if "expected_enrichment" in turn_data:
                print(f"üîß Enrichissement attendu:")
                print(f"   ‚Üí \"{turn_data['expected_enrichment']}\"\n")

            print("‚è≥ Envoi du message et g√©n√©ration de la r√©ponse...\n")

            # Envoyer message
            response = await send_message(conversation_id, turn_data["message"])

            # Afficher r√©ponse
            assistant_msg = response.get("assistant_message", {})
            content = assistant_msg.get("content", "")

            print("ü§ñ R√©ponse de l'assistant:")
            print("-" * 80)
            # Limiter affichage pour lisibilit√©
            display_content = content[:500] + "..." if len(content) > 500 else content
            print(display_content)
            print("-" * 80)
            print()

            # Valider r√©ponse
            validate_response(turn_data, response)

            # Pause entre tours
            await asyncio.sleep(1)

        # R√©cup√©rer contexte final
        print_separator("CONTEXTE FINAL")
        final_context = await get_conversation_context(conversation_id)
        print(f"‚úì Conversation ID: {final_context.get('id')}")
        print(f"‚úì Titre: {final_context.get('title')}")
        print(f"‚úì Nombre de messages: {final_context.get('message_count', 0)}")
        print()

        print_separator()
        print("‚úÖ TEST TERMIN√â AVEC SUCC√àS")
        print()
        print("üìä R√©sum√©:")
        print(f"  - {len(TEST_SCENARIO)} tours conversationnels test√©s")
        print(f"  - Contexte conversationnel maintenu tout au long")
        print(f"  - Enrichissement des queries courtes valid√©")
        print()

        return True

    except httpx.HTTPError as e:
        print(f"\n‚ùå ERREUR HTTP: {e}")
        print(f"   V√©rifiez que l'API est accessible √† {API_URL}")
        return False

    except Exception as e:
        print(f"\n‚ùå ERREUR INATTENDUE: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Point d'entr√©e principal."""
    success = await run_test_scenario()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())
