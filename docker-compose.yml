version: '3.8'

services:
  # Service PostgreSQL avec PGVector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ragfab-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-raguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ragpass123}
      POSTGRES_DB: ${POSTGRES_DB:-ragdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
      - ./database/02_web_schema.sql:/docker-entrypoint-initdb.d/02_web_schema.sql:ro
      - ./database/03_images_schema.sql:/docker-entrypoint-initdb.d/03_images_schema.sql:ro
      - ./database/04_auto_migration_reranking.sh:/docker-entrypoint-initdb.d/04_auto_migration_reranking.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-raguser} -d ${POSTGRES_DB:-ragdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragfab-network
    restart: unless-stopped

  # Service de migration automatique (s'exécute une fois au démarrage)
  db-migrations:
    image: postgres:16
    container_name: ragfab-db-migrations
    environment:
      PGHOST: postgres
      PGUSER: ${POSTGRES_USER:-raguser}
      PGPASSWORD: ${POSTGRES_PASSWORD:-ragpass123}
      PGDATABASE: ${POSTGRES_DB:-ragdb}
      AUTO_APPLY_MIGRATIONS: ${AUTO_APPLY_MIGRATIONS:-true}
    volumes:
      - ./database:/database:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ragfab-network
    command: /bin/bash /database/apply_migrations.sh
    restart: "no"  # S'exécute une fois puis s'arrête

  # Service d'embeddings
  embeddings:
    build:
      context: ./embeddings-server
      dockerfile: Dockerfile
    container_name: ragfab-embeddings
    environment:
      MODEL_NAME: ${EMBEDDING_MODEL:-intfloat/multilingual-e5-large}
    ports:
      - "${EMBEDDINGS_PORT:-8001}:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ragfab-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Service de reranking
  reranker:
    build:
      context: ./reranker-server
      dockerfile: Dockerfile
    container_name: ragfab-reranker
    environment:
      RERANKER_MODEL: ${RERANKER_MODEL:-BAAI/bge-reranker-v2-m3}
    ports:
      - "${RERANKER_PORT:-8002}:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - ragfab-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Application RAG (CLI mode - démarrage manuel)
  rag-app:
    build:
      context: ./rag-app
      dockerfile: Dockerfile
    container_name: ragfab-app
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass123}@postgres:5432/${POSTGRES_DB:-ragdb}
      EMBEDDINGS_API_URL: http://embeddings:8001
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-1024}
      # Generic LLM Configuration (RECOMMENDED)
      LLM_API_URL: ${LLM_API_URL:-https://api.mistral.ai}
      LLM_API_KEY: ${LLM_API_KEY:-}
      LLM_MODEL_NAME: ${LLM_MODEL_NAME:-mistral-small-latest}
      LLM_USE_TOOLS: ${LLM_USE_TOOLS:-true}
      LLM_TIMEOUT: ${LLM_TIMEOUT:-120.0}
      # Legacy variables (rétrocompatibilité)
      RAG_PROVIDER: ${RAG_PROVIDER:-chocolatine}
      CHOCOLATINE_API_URL: ${CHOCOLATINE_API_URL:-https://apigpt.mynumih.fr}
      CHOCOLATINE_API_KEY: ${CHOCOLATINE_API_KEY:-}
      CHOCOLATINE_MODEL_NAME: ${CHOCOLATINE_MODEL_NAME:-jpacifico/Chocolatine-2-14B-Instruct-v2.0.3}
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
      MISTRAL_API_URL: ${MISTRAL_API_URL:-https://api.mistral.ai}
      MISTRAL_MODEL_NAME: ${MISTRAL_MODEL_NAME:-mistral-small-latest}
      MISTRAL_TIMEOUT: ${MISTRAL_TIMEOUT:-120.0}
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - ragfab-network
    stdin_open: true
    tty: true
    profiles:
      - app  # Démarrage manuel avec: docker-compose --profile app up rag-app

  # Worker d'ingestion permanent
  ingestion-worker:
    build:
      context: .
      dockerfile: ingestion-worker/Dockerfile
    container_name: ragfab-ingestion-worker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass123}@postgres:5432/${POSTGRES_DB:-ragdb}
      EMBEDDINGS_API_URL: http://embeddings:8001
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-1024}
      CHUNK_SIZE: ${CHUNK_SIZE:-1500}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-200}
      USE_SEMANTIC_CHUNKING: ${USE_SEMANTIC_CHUNKING:-true}
      WORKER_POLL_INTERVAL: ${WORKER_POLL_INTERVAL:-3}
      WORKER_TIMEOUT_MINUTES: ${WORKER_TIMEOUT_MINUTES:-30}
      UPLOADS_DIR: /app/uploads
      VLM_ENABLED: ${VLM_ENABLED:-false}
      VLM_API_URL: ${VLM_API_URL:-}
      VLM_API_KEY: ${VLM_API_KEY:-}
      VLM_MODEL_NAME: ${VLM_MODEL_NAME:-SmolDocling-256M}
      VLM_TIMEOUT: ${VLM_TIMEOUT:-60.0}
      VLM_PROMPT: ${VLM_PROMPT:-Décris cette image en détail en français. Extrais tout le texte visible.}
      IMAGE_STORAGE_PATH: ${IMAGE_STORAGE_PATH:-/app/uploads/images}
      IMAGE_MAX_SIZE_MB: ${IMAGE_MAX_SIZE_MB:-10}
      IMAGE_QUALITY: ${IMAGE_QUALITY:-85}
      IMAGE_OUTPUT_FORMAT: ${IMAGE_OUTPUT_FORMAT:-png}
      # Contextual Retrieval Configuration
      USE_PARENT_CHILD_CHUNKS: ${USE_PARENT_CHILD_CHUNKS:-false}
    volumes:
      - ./rag-app:/app/rag-app:ro  # Monter rag-app pour importer les modules d'ingestion
      - api_uploads:/app/uploads  # Partager le volume d'uploads avec l'API
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - ragfab-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # API Backend FastAPI
  ragfab-api:
    build:
      context: ./web-api
      dockerfile: Dockerfile
    container_name: ragfab-api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-raguser}:${POSTGRES_PASSWORD:-ragpass123}@postgres:5432/${POSTGRES_DB:-ragdb}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      EMBEDDINGS_API_URL: http://embeddings:8001
      RERANKER_ENABLED: ${RERANKER_ENABLED:-false}
      RERANKER_API_URL: http://reranker:8002
      RERANKER_TOP_K: ${RERANKER_TOP_K:-20}
      RERANKER_RETURN_K: ${RERANKER_RETURN_K:-5}
      # Contextual Retrieval Configuration
      USE_ADJACENT_CHUNKS: ${USE_ADJACENT_CHUNKS:-true}
      # Generic LLM Configuration (RECOMMENDED)
      LLM_API_URL: ${LLM_API_URL:-https://api.mistral.ai}
      LLM_API_KEY: ${LLM_API_KEY:-}
      LLM_MODEL_NAME: ${LLM_MODEL_NAME:-mistral-small-latest}
      LLM_USE_TOOLS: ${LLM_USE_TOOLS:-true}
      LLM_TIMEOUT: ${LLM_TIMEOUT:-120.0}
      # Legacy variables (rétrocompatibilité)
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
      MISTRAL_MODEL_NAME: ${MISTRAL_MODEL_NAME:-mistral-small-latest}
      CHOCOLATINE_API_URL: ${CHOCOLATINE_API_URL:-https://apigpt.mynumih.fr}
      CHOCOLATINE_MODEL_NAME: ${CHOCOLATINE_MODEL_NAME:-jpacifico/Chocolatine-2-14B-Instruct-v2.0.3}
      CORS_ORIGINS: ${CORS_ORIGINS:-}
      UPLOAD_DIR: /app/uploads
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./rag-app:/app/rag-app:ro  # Monter rag-app en lecture seule pour import des modules
      - api_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - ragfab-network
    restart: unless-stopped

  # Frontend React
  ragfab-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ragfab-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - ragfab-api
    networks:
      - ragfab-network
    restart: unless-stopped

networks:
  ragfab-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  api_uploads:
    driver: local
